version: '3.7'

services:
  
  # MongoDB
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MongoDB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MongoDB_PASSWORD}
    ports:
      - '27017:27017'
    volumes:
      - './data/db:/data/db'
      # - mongo:/var/lib/mysql
    healthcheck:
      # test: echo 'db.runCommand("ping").ok' | mongo ${LOCAL_HOST:-localhost}:27017/test --quiet
      test: exit 0
      interval: 10s
      timeout: 10s
      retries: 3
      # start_period: 20s
      # move to Atlas for Cloud Distribution in production
    labels:
      - traefik.enable=true
      - traefik.http.routers.mongo.rule=Host(`mongo.${LOCAL_HOST:-localhost}`)
      - traefik.http.routers.mongo.entrypoints=web
      - traefik.http.services.mongo.loadbalancer.server.port=27017

  # # StoryBook-Nginx
  # storybook:
  #   # image: nginx:1.21.3-alpine
  #   image: turtlewolfe/storybook:prod
  #   # image: turtlewolfe/storybook:dev
  #   # networks:
  #   #   - web
  #   build:
  #     target: prod
  #     # target: dev
  #     context: react-social-ui
  #     dockerfile: ./Dockerfile
  #   volumes:
  #     # dev:
  #     # - ./react-social-ui:/usr/src/app
  #     # prod:
  #     - ./docs:/usr/share/nginx/html
  #     - ./react-social-ui/nginx:/etc/nginx/conf.d
  #   restart: always
  #   # Here we define our settings for traefik how to proxy our service.
  #   labels:
  #     # - 'DevMail=${DEV_MAIL:-joey}'
  #     # This is enableing treafik to proxy this service
  #     # We set a label to tell Traefik to assign a hostname to the new service
  #     - 'traefik.enable=true'
  #     # Here we have to define the URL
  #     - 'traefik.http.routers.storybook.rule=Host(`storybook.${LOCAL_HOST:-localhost}`)'
  #     # Here we are defining wich entrypoint should be used by clients to access this service
  #     - 'traefik.http.routers.storybook.entrypoints=web'
  #     - 'traefik.http.routers.storybook.entrypoints=websecure'
  #     # Here we define in wich network treafik can find this service
  #     # - "traefik.docker.network=web"
  #     - 'traefik.http.routers.storybook.tls.certresolver=myresolver'
  #     # - 'traefik.http.routers.storybook.service=storybook'
  #     # This is the port that traefik should proxy
  #     - 'traefik.http.services.storybook.loadbalancer.server.port=80'
  #     # - 'traefik.http.services.storybook.loadbalancer.server.port=6006'

  # TRAEFIK
  traefik:
    # The latest official supported Traefik docker image
    # image: traefik:v2.3
    image: traefik:v2.5.3
    ports:
      # Exposes port 80 for incomming web requests
      - '80:80'
      - '443:443'
      # The Web UI port http://0.0.0.0:8080 (enabled by --api.insecure=true)
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
        # Copies the Let's Encrypt certificate locally for ease of backing up
      - ./../letsencrypt:/letsencrypt
      # Mounts the Traefik static configuration inside the Traefik container
      # So that Traefik can read the configuration file
      - ./traefik.yml:/etc/traefik/traefik.yml
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck']
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 5s
    # deploy:
    #   labels:
    #     - 'traefik.enable=true'
    #     - 'traefik.http.routers.myproject.rule=Host(`myproject.${LOCAL_HOST:-localhost}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))'

  # WhoAmI
  whoami:
    # A container that exposes an API to show its IP address
    image: containous/whoami
    # We set a label to tell Traefik to assign a hostname to the new service
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.whoami.rule=Host(`whoami.${LOCAL_HOST:-localhost}`)'
      # - 'traefik.http.routers.whoami.entrypoints=web'
      - 'traefik.http.routers.whoami.entrypoints=websecure'
      - 'traefik.http.routers.whoami.tls.certresolver=myresolver'
      - 'traefik.http.routers.whoami.service=whoami'
      - 'traefik.http.services.whoami.loadbalancer.server.port=80'

  # Add the catapp service
  catapp:
    image: mikesir87/cats:1.0
    labels:
      - 'traefik.enable=true'
      # Routers
      - 'traefik.http.routers.catapp.rule=Host(`catapp.${LOCAL_HOST:-localhost}`)'
      # - "traefik.http.routers.catapp.rule=Host(`<your-domain-here>`)"
      # - 'traefik.http.routers.catapp.service=catapp'
      - 'traefik.http.routers.catapp.entrypoints=web'

      - 'traefik.http.routers.catapp.middlewares=test-redirectscheme'
      - 'traefik.http.routers.catapp-secure.rule=Host(`catapp.${LOCAL_HOST:-localhost}`)'
      - 'traefik.http.routers.catapp-secure.entrypoints=websecure'
      - 'traefik.http.routers.catapp-secure.tls.certresolver=myresolver'
      - 'traefik.http.routers.catapp-secure.middlewares=test-compress,test-errorpages,test-ratelimit'
      # Services
      - 'traefik.http.services.catapp-secure.loadbalancer.server.port=5000'

      # Middleware BasicAuth
      # - 'traefik.http.middlewares.test-auth.basicauth.users=traefik:$$apr1$$.zPbdVg8$$LcHeyCZElH.JfxkxxlMPI.,user2:$$apr1$$XDrP1Fb1$$SZqSEjvNYW44vgJgI3iEP0'
      # user1: traefik password: training
      # user2: user2 password: test123
      # Create hash password -> echo $(htpasswd -nb user2 test123) | sed -e s/\\$/\\$\\$/g

      # Compress Middleware
      - 'traefik.http.middlewares.test-compress.compress=true'
      # Error Pages Middleware
      - 'traefik.http.middlewares.test-errorpages.errors.status=400-599'
      - 'traefik.http.middlewares.test-errorpages.errors.service=error'
      - 'traefik.http.middlewares.test-errorpages.errors.query=/{status}.html'
      # Rate Limit Middleware
      - 'traefik.http.middlewares.test-ratelimit.ratelimit.average=2'
      # Redirect Scheme HTTP -> HTTPS
      - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https'
      - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true'

  # Error Page service
  error:
    image: guillaumebriday/traefik-custom-error-pages
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.error.rule=Host(`error.${LOCAL_HOST:-localhost}`)'
      - 'traefik.http.routers.error.service=error'
      - 'traefik.http.services.error.loadbalancer.server.port=80'
      # - traefik.frontend.rule=PathPrefixStrip:/wait
      - 'traefik.http.routers.error.entrypoints=web'

  expo:
    image: turtlewolfe/expo:prod
    # build: .
    build:
      context: ./expo
      dockerfile: Dockerfile
      target: prod
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.expo.rule=Host(`expo.${LOCAL_HOST:-localhost}`)"
      - "traefik.http.routers.expo.entrypoints=web"
      - "traefik.http.services.expo.loadbalancer.server.port=3000"
    environment:
      - NODE_ENV=${NODE_ENV}      

volumes:
  expo:
  wordpress:
  db:
  mongo:
